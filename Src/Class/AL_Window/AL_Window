' Variable Declaration

    ' Boolean if the window is open, upper left corner of window and window itself
    Private p_Initialized As Boolean
    Private p_WindowOpen As Boolean
    Private p_WindowPosition As Range
    Private p_Window As Range
    Private p_Camera As New AL_Camera

    ' Windowsize
    Private p_Length As Integer
    Private p_Width As Integer
    Private p_Depth As Integer

    ' Boundaries
    Private p_UpperBound As Single
    Private p_LowerBound As Single
    Private p_LeftBound As Single
    Private p_RightBound As Single
    Private p_DepthBound As Single

    ' Center and Normals(Factor needed to multiply to get the size)
    Private p_Center As New AL_Vertex
    Private p_NormalLength As Single
    Private p_NormalWidth As Single
    Private p_NormalDepth As Single

    ' The objects that gets drawn to the window and the NullCell, which is used when nothing should be drawn
    Private p_ScreenObjects(1024) As AL_ScreenObject
    Private p_NullCell As AL_ScreenObject

    ' These Variables are used for VertexBuffers and stuff
    Private p_VertexBuffer As AL_VertexBuffer
    Private p_IndexBuffer As AL_IndexBuffer

' Let Get Set

    Public Property Let WindowOpen(Value As Boolean)
        p_WindowOpen = Value
    End Property

    Public Property Get WindowOpen() As Boolean
        WindowPosition = p_WindowOpen
    End Property

    Public Property Let WindowPosition(Value As Range)
        Set p_WindowPosition = Value
    End Property

    Public Property Get WindowPosition() As Range
        Set WindowPosition = p_WindowPosition
    End Property

    Public Property Let Camera(Value As AL_Camera)
        Set p_Camera = Value
    End Property
    
    Public Property Get Camera() As AL_Camera
        Set Camera = p_Camera
    End Property

    Public Property Let Length(Value As Integer)
        p_Length = Value
    End Property

    Public Property Get Length() As Integer
        Length = p_Length
    End Property

    Public Property Let Width(Value As Integer)
        p_Depth = Value
    End Property

    Public Property Get Width() As Integer
        Width = p_Width
    End Property

    Public Property Let Depth(Value As Integer)
        p_Depth = Value
    End Property

    Public Property Get Depth() As Integer
        Depth = p_Depth
    End Property

    Public Property Let UpperBound(Value As Integer)
        p_UpperBound = Value
    End Property

    Public Property Get UpperBound() As Integer
        UpperBound = p_UpperBound
    End Property

    Public Property Let LowerBound(Value As Integer)
        p_LowerBound = Value
    End Property

    Public Property Get LowerBound() As Integer
        LowerBound = p_LowerBound
    End Property

    Public Property Let LeftBound(Value As Integer)
        p_LeftBound = Value
    End Property

    Public Property Get LeftBound() As Integer
        LeftBound = p_LeftBound
    End Property
    Public Property Let RightBound(Value As Integer)
        p_RightBound = Value
    End Property

    Public Property Get RightBound() As Integer
        RightBound = p_RightBound
    End Property

    Public Property Let DepthBound(Value As Integer)
        p_DepthBound = Value
    End Property

    Public Property Get DepthBound() As Integer
        DepthBound = p_DepthBound
    End Property

    Public Property Let Center(Value As AL_Vertex)
        p_Center = Value
    End Property

    Public Property Get Center() As AL_Vertex
        Center = p_Center
    End Property

    Public Property Let NormalLength(Value As Single)
        p_NormalLength = Value
    End Property

    Public Property Get NormalLength() As Single
        NormalLength = p_NormalLength
    End Property

    Public Property Let NormalWidth(Value As Single)
        p_NormalWidth = Value
    End Property

    Public Property Get NormalWidth() As Single
        NormalWidth = p_NormalWidth
    End Property

    Public Property Let NormalDepth(Value As Single)
        p_NormalDepth = Value
    End Property

    Public Property Get NormalDepth() As Single
        NormalDepth = p_NormalDepth
    End Property

    Public Property Let Window(Value As Range)
        Set p_Window = Value
    End Property

    Public Property Get Window() As Range
        Set Window = p_Window
    End Property

    Public Property Let NullCell(Value As Range)
        Set p_NullCell = Value
    End Property

    Public Property Get NullCell() As Range
        Set NullCell = p_NullCell
    End Property

    Public Property Let ScreenObjects(Index As Integer, Value As AL_ScreenObject)
        Set p_ScreenObjects(Index) = Value
    End Property
    
    Public Property Get ScreenObjects(Index As Integer) As AL_ScreenObject
        Set ScreenObjects = p_ScreenObjects(Index)
    End Property

    Public Property Let VertexBuffer(Value As AL_VertexBuffer)
        Set p_VertexBuffer = Value
    End Property

    Public Property Get VertexBuffer() As AL_VertexBuffer
        Set VertexBuffer = p_VertexBuffer
    End Property

    Public Property Let IndexBuffer(Value As AL_IndexBuffer)
        Set p_IndexBuffer = Value
    End Property

    Public Property Get IndexBuffer() As AL_IndexBuffer
        Set IndexBuffer = p_IndexBuffer
    End Property
'

Private Function IsInitialized()
    If p_Initialized = False Then
        AL_Error_Print 7, 5, "AL_Window"
        AL_Error_Show 7, 5, "AL_Window"
        End
    End If
    IsInitialized = True
End Function

Public Sub Initialize(Camera As AL_Camera, WorkbookName As String, SheetName As String, Position As String, Length As Integer, Width As Integer, Depth As Integer)
    Set p_Camera = Camera
    Set p_WindowPosition = Workbooks(WorkbookName).Sheets(SheetName).Range(Position)
    p_Length = Length
    p_Width = Width
    p_Depth = Depth
    Set p_Window = Range(p_WindowPosition, p_WindowPosition.Offset(Length - 1, Width - 1))
    LetCenter
    LetNormal
    LetBounds
    p_Initialized = True
    p_WindowOpen = True
End Sub

Public Sub LetCenter()
    p_Center.X = Int((p_Length / 2) + 0.5)
    p_Center.Y = Int((p_Width / 2) + 0.5)
    p_Center.Z = Depth
End Sub

' Sets the Normals
Public Sub LetNormal()
    p_NormalLength = 1 / p_Center.X
    p_NormalWidth = 1 / p_Center.Y
    p_NormalWidth = 1 / p_Center.Z
End Sub

' Sets the Bounds
Public Sub LetBounds()
    p_UpperBound = p_Center.Y * NormalWidth
    p_LowerBound = p_Center.Y * NormalWidth * -1
    p_LeftBound = p_Center.X * NormalLength
    p_RightBound = p_Center.X * NormalLength * -1
    p_DepthBound = p_Center.Z
End Sub

' Clears the Window with a color or standard with white
Public Sub Clear(Optional Color As Long = 16777215)
    If IsInitialized = True Then
        Color = Int(Color)
        p_Window.Interior.Color = Color
    End If
End Sub

' Draws all used Ranges in DrawRange Array
Public Sub Draw()
    If IsInitialized = True Then
        Dim i As Integer

        i = 0
        Do Until p_ScreenObjects(i) Is Nothing

            ' Cut to Window or NullCenter and then Draw
            Transform p_ScreenObjects(i)
            Set p_ScreenObjects(i) = CutToBounds(p_ScreenObjects(i))

            ' Get Negative Offset and add it to the Center resulting in the true Cell value to offset
            p_ScreenObjects(i).Texture.Texture.Copy
            Range(p_Window.Cells _
            (WorksheetFunction.RoundUp(Center.Y + (p_ScreenObjects(i).Vertex.Y / p_NormalWidth), 0), _
             WorksheetFunction.RoundUp(Center.X + (p_ScreenObjects(i).Vertex.X / p_NormalLength), 0)), p_Window.Cells _
            (WorksheetFunction.RoundUp(Center.Y + (p_ScreenObjects(i).Length.Y / p_NormalWidth), 0), _
             WorksheetFunction.RoundUp(Center.X + (p_ScreenObjects(i).Length.X / p_NormalLength), 0))).PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
            i = i + 1
            If i > 1024 Then
                AL_Error_Print 1, 5, i
                AL_Error_Show 1, 5, i
                End
            End If
        Loop
    End If
End Sub

' Inserts a Range into the DrawRange Array
Public Sub Insert(ScreenObject As AL_ScreenObject)
    If IsInitialized = True Then
        Dim i As Integer
        
        i = 0
        Do Until p_ScreenObjects(i) Is Nothing
        i = i + 1
            If i > 1024 Then
                AL_Error_Print 1, 5, LongValue
                AL_Error_Show 1, 5, LongValue
                End
            End If
        Loop
        Set p_ScreenObjects(i) = ScreenObject
    End If
End Sub

' Releases all Ranges from the DrawRange
Public Sub ReleaseObject()
    If IsInitialized = True Then
        Dim i As Integer

        i = 0
        Do Until p_ScreenObjects(i) Is Nothing
            Set p_ScreenObjects(i) = Nothing
            i = i + 1
            If i > 1024 Then
                AL_Error_Print 1, 5, LongValue
                AL_Error_Show 1, 5, LongValue
                End
            End If
        Loop
    End If
End Sub

' Check if Range is in Bounds of Window
Private Function InBounds(ScreenObject As AL_ScreenObject) As Boolean
    If IsInitialized = True Then
            If (DepthBound >= ScreenObject.Vertex.Z Or DepthBound >= ScreenObject.Length.Z) And _
            (UpperBound >= ScreenObject.Vertex.Y Or LowerBound <= ScreenObject.Vertex.Y) Or _
            (LeftBound <= ScreenObject.Vertex.X Or RightBound >= ScreenObject.Vertex.X) Or _
            (UpperBound >= ScreenObject.Length.Y Or LowerBound <= ScreenObject.Length.Y) Or _
            (LeftBound <= ScreenObject.Length.X Or RightBound >= ScreenObject.Length.X) Then
                InBounds = False
            Else
                InBounds = True
        End If
    End If
End Function

' Cut Range to Bounds of Window
Private Function CutToBounds(ScreenObject As AL_ScreenObject) As AL_ScreenObject

    If IsInitialized = True Then
        Dim TempObj As New AL_ScreenObject
        ' Cut Range to Window boundaries
        If InBounds(ScreenObject) = False Then
                Dim Vertex As New AL_Vertex
                Dim Length As New AL_Vertex
                Dim CutVertex As New AL_Vertex
                Dim CutLength As New AL_Vertex
                Dim CutDifference(3) As Single
        
                Vertex.X = ScreenObject.Vertex.X
                Vertex.Y = ScreenObject.Vertex.Y
                Length.X = ScreenObject.Length.X
                Length.Y = ScreenObject.Length.Y
        
                ' Looks how far the Vertex are outside the Border and sets the CutVertex to the Border
                ' Cutdifference is the product of the factor of the cut from the borders multiplied by the maxlength, resulting in an "offset factor", which is set to a whole value (Cell value)
                If p_UpperBound < Vertex.Y Then
                        CutVertex.Y = p_UpperBound
                        CutDifference(0) = WorksheetFunction.RoundUp(ScreenObject.OgLength.Y * ((Vertex.Y - p_UpperBound) / (Length.Y)), 0)
                    Else
                        CutVertex.Y = Vertex.Y
                        CutDifference(0) = 1
                End If
                If p_LeftBound > Vertex.X Then
                        CutVertex.X = p_LeftBound
                        CutDifference(1) = WorksheetFunction.RoundUp(ScreenObject.OgLength.X * ((Abs(Vertex.Y) - Abs(p_LeftBound)) / (Length.X)), 0)
                    Else
                        CutVertex.X = Vertex.X
                        CutDifference(1) = 1
                End If
            
                If p_LowerBound > Length.Y + Vertex.Y Then
                        CutLength.Y = p_LowerBound
                        CutDifference(2) = WorksheetFunction.RoundUp(ScreenObject.OgLength.Y * ((Abs(Length.Y) - Abs(p_LowerBound)) / (Length.Y)), 0)
                    Else
                        CutLength.Y = Length.Y + Vertex.Y
                        CutDifference(2) = Length.Y
                End If
                If p_RightBound < Length.X + Vertex.X Then
                        CutLength.X = p_RightBound
                        CutDifference(3) = WorksheetFunction.RoundUp(ScreenObject.OgLength.X * ((Length.X - p_RightBound) / (Length.Y)), 0)
                    Else
                        CutLength.X = Length.X + Vertex.X
                        CutDifference(3) = Length.X
                End If
            
                TempObj.Vertex.X = CutVertex.X
                TempObj.Vertex.Y = CutVertex.Y
                TempObj.Length.X = CutLength.X
                TempObj.Length.Y = CutLength.Y
                Set TempObj.Texture.Texture = ScreenObject.Texture.Texture.Range(ScreenObject.Texture.Texture.Cells(CutDifference(0), CutDifference(1)), ScreenObject.Texture.Texture.Cells(CutDifference(2), CutDifference(3)))            Else
                
                TempObj.Vertex.X = p_NullCell.Texture.Texture.Column
                TempObj.Vertex.Y = p_NullCell.Texture.Texture.Row
                TempObj.Length.X = p_NullCell.Texture.Texture.Column
                TempObj.Length.Y = p_NullCell.Texture.Texture.Row
                Set TempObj.Texture = p_NullCell.Texture
        End If
        CutToBounds = TempObj
    End If
    
End Function

' Projects to Screen
Private Sub Project(ByRef ScreenObject As AL_ScreenObject)
    Dim ScaleFactor As Single
    Dim Temp As AL_ScreenObject
    
    Set Temp = ScreenObject
    ScaleFactor = Camera.ScreenDistance / (ScreenObject.Vertex.Z + Camera.ScreenDistance)
    Rotate Temp, Camera.Direction.X, "X"
    Rotate Temp, Camera.Direction.Y, "Y"
    Rotate Temp, Camera.Direction.Z, "Z"
    ScreenObject.Vertex.Y = Camera.Location.Y + (Temp.Vertex.Y - Camera.Location.Y) * ScaleFactor
    ScreenObject.Vertex.X = Camera.Location.X + (Temp.Vertex.X - Camera.Location.X) * ScaleFactor
    ScreenObject.Length.Y = Camera.Location.Y + (Temp.Length.Y - Camera.Location.Y) * ScaleFactor
    ScreenObject.Length.X = Camera.Location.Y + (Temp.Length.Y - Camera.Location.Y) * ScaleFactor
End Sub

' Translates, Rotates and Scales the Screenobject
Public Sub Transform(ByRef ScreenObject As AL_ScreenObject, Optional TranslateVertex As AL_Vertex = Nothing, Optional ScaleVertex As AL_Vertex = Nothing, Optional ThetaX As Single = 0, Optional ThetaY As Single = 0, Optional ThetaZ As Single = 0)
    If Not TranslateVertex Is Nothing Then
        Translate ScreenObject, TranslateVertex
    End If
    If ThetaX > 0 Then
        Rotate ScreenObject, ThetaX, "X"
    End If
    If ThetaY > 0 Then
        Rotate ScreenObject, ThetaY, "Y"
    End If
    If ThetaZ > 0 Then
        Rotate ScreenObject, ThetaZ, "Z"
    End If
    If Not ScaleVertex Is Nothing Then
        Scaling ScreenObject, ScaleVertex
    End If
End Sub

Private Sub Translate(ByRef ScreenObject As AL_ScreenObject, Vertex As AL_Vertex)
    If IsInitialized = True Then
        ScreenObject.Vertex.X = ScreenObject.Vertex.X + Vertex.X
        ScreenObject.Vertex.Y = ScreenObject.Vertex.Y + Vertex.Y
        ScreenObject.Vertex.Z = ScreenObject.Vertex.Z + Vertex.Z
        ScreenObject.Vertex.W = ScreenObject.Vertex.W + Vertex.W
    End If
End Sub

Private Sub Rotate(ByRef ScreenObject As AL_ScreenObject, Theta As Single, Axis As String)

    If IsInitialized = True Then
        Select Case Axis
            Case Is = "X"
                ScreenObject.Vertex.Y = ScreenObject.Vertex.Y * Cos(Theta) + ScreenObject.Vertex.Y * Sin(Theta)
                ScreenObject.Vertex.Z = ScreenObject.Vertex.Z * -Sin(Theta) + ScreenObject.Vertex.Z * Cos(Theta)
            Case Is = "Y"
                ScreenObject.Vertex.X = ScreenObject.Vertex.X * Cos(Theta) + ScreenObject.Vertex.X * -Sin(Theta)
                ScreenObject.Vertex.Z = ScreenObject.Vertex.Z * Sin(Theta) + ScreenObject.Vertex.Z * Cos(Theta)
            Case Is = "Z"
                ScreenObject.Vertex.X = ScreenObject.Vertex.X * Cos(Theta) + ScreenObject.Vertex.X * Sin(Theta)
                ScreenObject.Vertex.Y = ScreenObject.Vertex.Y * -Sin(Theta) + ScreenObject.Vertex.Y * Cos(Theta)
            Case Else
                AL_Error_Print 1, 2, Axis
                AL_Error_Show 1, 2, Axis
                End
        End Select
    End If

End Sub

Private Sub Scaling(ByRef ScreenObject As AL_ScreenObject, Vertex As AL_Vertex)
    If IsInitialized = True Then
        ScreenObject.Vertex.X = ScreenObject.Vertex.X * Vertex.X
        ScreenObject.Vertex.Y = ScreenObject.Vertex.Y * Vertex.Y
        ScreenObject.Vertex.Z = ScreenObject.Vertex.Z * Vertex.Z
        ScreenObject.Vertex.W = ScreenObject.Vertex.W * Vertex.W
    End If
End Sub

Public Sub TEST()
    Dim TempCamera As New AL_Camera
    Dim Texture As New AL_Texture
    Dim TranslateVertex As New AL_Vertex
    Dim ScaleVertex As New AL_Vertex
    Dim ScreenObject As New AL_ScreenObject
    Dim Window As New AL_Window
    ScreenObject.Initialize 1, 1, 1, 2, 2, 2
    Texture.Initialize "Book1", "Textures", 0, 0, 1, 1
    TempCamera.Initialize 1, 1, 1, 1, 1, 1, 100
    ScreenObject.Texture = Texture
    TranslateVertex.X = 1
    TranslateVertex.Y = 3
    TranslateVertex.Z = 2
    ScaleVertex.X = 1
    ScaleVertex.Y = 3
    ScaleVertex.Z = 2
    Window.Initialize TempCamera, "Book1", "Sheet1", "C4", 200, 100, 100
    Window.Insert ScreenObject
    Window.Insert ScreenObject
    Window.ReleaseObject
    Window.Insert ScreenObject
    Window.Transform Window.ScreenObjects(0), TranslateVertex, ScaleVertex, 1.5, 2, 1.3
    Window.Clear
    Window.Draw
End Sub

Sub DrawLine(Window As Range, x0 As Integer, y0 As Integer, x1 As Integer, y1 As Integer)
    Dim dx As Integer, dy As Integer
    Dim sx As Integer, sy As Integer
    Dim err As Integer, e2 As Integer
    
    ' Determine direction of line
    If x0 < x1 Then
        sx = 1
        dx = x1 - x0
    Else
        sx = -1
        dx = x0 - x1
    End If
    
    If y0 < y1 Then
        sy = 1
        dy = y1 - y0
    Else
        sy = -1
        dy = y0 - y1
    End If
    
    ' Initial error
    err = dx - dy
    
    Do While (x0 <> x1) Or (y0 <> y1)
        ' Set pixel at (x0, y0)
        ws.Cells(y0, x0).Interior.Color = RGB(0, 0, 0)
        
        ' Calculate error for next pixel
        e2 = 2 * err
        
        ' Move along x-axis
        If e2 > -dy Then
            err = err - dy
            x0 = x0 + sx
        End If
        
        ' Move along y-axis
        If e2 < dx Then
            err = err + dx
            y0 = y0 + sy
        End If
    Loop
    
    ' Set pixel at (x1, y1)
    Window.Cells(y1, x1).Interior.Color = RGB(0, 0, 0)
End Sub