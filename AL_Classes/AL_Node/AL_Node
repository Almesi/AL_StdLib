' Class module: AL_Node
' Describes a Point in 3D-Space with Cost to Start, Goal and Whole

' Variable Declaration
    Private p_X As Integer
    Private p_Y As Integer
    Private p_Z As Integer
    Private p_S_Cost As Integer
    Private p_G_Cost As Integer
    Private p_W_Cost As Integer
    Private p_Parent As New AL_Node
'

' Get Let Set
    Public Property Let X(ByVal Value As Integer)
        p_X = Value
    End Property

    Public Property Get X() As Integer
        X = p_X
    End Property

    Public Property Let Y(ByVal Value As Integer)
        p_Y = Value
    End Property

    Public Property Get Y() As Integer
        Y = p_Y
    End Property

    Public Property Let Z(ByVal Value As Integer)
        p_Z = Value
    End Property

    Public Property Get Z() As Integer
        Z = p_Z
    End Property

    Public Property Let S_Cost(ByVal Value As Integer)
        p_S_Cost = Value
    End Property

    Public Property Get S_Cost() As Integer
        S_Cost = p_S_Cost
    End Property

    Public Property Let G_Cost(ByVal Value As Integer)
        p_G_Cost = Value
    End Property

    Public Property Get G_Cost() As Integer
        G_Cost = p_G_Cost
    End Property

    Public Property Let W_Cost(ByVal Value As Integer)
        p_W_Cost = Value
    End Property

    Public Property Get W_Cost() As Integer
        W_Cost = p_W_Cost
    End Property

    Public Property Let Parent(ByVal Node As AL_Node)
        Set p_Parent = Node
    End Property

    Public Property Get Parent() As AL_Node
        Set Parent = p_Parent
    End Property

    Public Property Let Point(ByVal Node As AL_Node)
        p_X = Node.X
        p_Y = Node.Y
        p_Z = Node.Z
    End Property

    Public Sub LetPoint(ByVal X As Integer, ByVal Y As Integer, ByVal Z As Integer)
        p_X = X
        p_Y = Y
        p_Z = Z
    End Sub
'

Public Function IsNode(ByVal Node As AL_Node) As Boolean
    If Node.X = p_X And Node.Y = p_Y And Node.Z = p_Z Then
            IsNode = True
        Else
            IsNode = False
    End If
End Function

Public Sub CalculateDistance(ByVal ReferenceNode As AL_Node, ByVal StartNode As AL_Node, ByVal GoalNode As AL_Node)
    If ReferenceNode Is Nothing Then
        AL_Error_Print 7, 2, "ReferenceNode"
        AL_PrintShow 7, 2, "ReferenceNode"
        End
    End If
    If ReferenceNode Is Nothing Then
        AL_Error_Print 7, 2, "StartNode"
        AL_PrintShow 7, 2, "StartNode"
        End
    End If
    If ReferenceNode Is Nothing Then
        AL_Error_Print 7, 2, "GoalNode"
        AL_PrintShow 7, 2, "GoalNode"
        End
    End If

    Dim dx as Integer, dy As Integer, dz As Integer, sd As Integer, md As Integer, bd As Integer

    dx = AL_Math_Difference_Integer(StartNode.X, ReferenceNode.X)
    dy = AL_Math_Difference_Integer(StartNode.Y, ReferenceNode.Y)
    dz = AL_Math_Difference_Integer(StartNode.Z, ReferenceNode.Z)
    
    ' Looks for the biggest, middle and smallest in difference
    If dx > dy Then
            If dx > dz Then
                    bd = dx
                    md = dz
                    sd = dy
                else
                    bd = dz
                    md = dx
                    sd = dy
            End If
        Else
            If dy > dz Then
                    bd = dy
                    md = dz
                    sd = dx
                else
                    bd = dz
                    md = dy
                    sd = dx
            End If
    End If
    p_S_Cost = (sd) * 17 + (md - sd) * 14 + (bd - md) * 10

    dx = AL_Math_Difference_Integer(GoalNode.X, ReferenceNode.X)
    dy = AL_Math_Difference_Integer(GoalNode.Y, ReferenceNode.Y)
    dz = AL_Math_Difference_Integer(GoalNode.Z, ReferenceNode.Z)
    
    ' Looks for the biggest, middle and smallest in difference
    If dx > dy Then
            If dx > dz Then
                    bd = dx
                    md = dz
                    sd = dy
                else
                    bd = dz
                    md = dx
                    sd = dy
            End If
        Else
            If dy > dz Then
                    bd = dy
                    md = dz
                    sd = dx
                else
                    bd = dz
                    md = dy
                    sd = dx
            End If
    End If
    p_G_Cost = (sd) * 17 + (md - sd) * 14 + (bd - md) * 10
    p_W_Cost = p_S_Cost + p_G_Cost
End Sub