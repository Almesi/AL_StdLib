' Class module: AL_String
' Dependencies: AL_Char
' Describes a Custom String, which is an Array of chars
' Takes a String as Input and outputs a String. But the processing is different

' Array of AL_Char
Private p_String() As New AL_Char

' Describes the Length of the Array
Private p_Length As Integer


' Get and Set Char
Public Property Let CharString(ByVal Text As String)
    LetLength(Len(Text))
    For i = 0 To p_Length - 1
        p_String(i).Character = Mid(Text, i + 1, 1)
    Next i
End Property

Public Property Get CharString() As String
    For i = 0 To p_Length - 1
        CharString = CharString & p_String(i).Character
    Next i
End Property


' Get and Let Length
Public Property Let Length(ByVal n_length As Integer)
    LetLength(n_length)
End Property

Public Property Get Length() As Integer
    Length = p_Length
End Property


' Dynamic Arraylength
' If new length is shorter than old length everything after shorter one will be discarded
Private Sub LetLength(ByVal n_length As Integer)
    If p_Length > n_length Then
            p_length = n_length
            Dim Temp() As New AL_Char
            ReDim Temp(p_Length)
            For i = 0 To n_length - 1
                
                Temp(i).Character = p_String(i).Character
            Next i
            ReDim p_String(p_Length)
            For i = 0 To n_length - 1
                p_String(i).Character = Temp(i).Character
            Next i
    Else
            p_Length = n_length
            ReDim Preserve p_String(p_Length)
    End If
End Sub